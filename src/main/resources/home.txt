package io.github.FourteenBrush.MagmaBuildNetwork.spawn;

import io.github.FourteenBrush.MagmaBuildNetwork.data.ConfigManager;
import org.bukkit.Location;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.configuration.serialization.ConfigurationSerializable;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class Home implements ConfigurationSerializable {

    private final String name;
    private final String owner;
    private final Location location;

    public Home(String name, String owner, Location location) {
        this.name = name;
        this.owner = owner;
        this.location = location;
    }

    @Override
    public @NotNull Map<String, Object> serialize() {
        final Map<String, Object> data = new HashMap<>();
        data.put("name", this.name);
        data.put("owner", this.name);
        data.put("location", this.location);
        return data;
    }

    public static Home deserialize(final Map<String, Object> map) {
        final String name = (String) map.get("name");
        final String owner = (String) map.get("owner");
        final Location location = (Location) map.get("location");
        return new Home(name, owner, location);
    }

    public void savePlayerHomes(final UUID playerID, final File playerFile) {
        try {
            final YamlConfiguration configuration = YamlConfiguration.loadConfiguration(playerFile);
            final List<Home> playerHomes = getHomes(playerID);
            configuration.set("homes", playerHomes);
            configuration.save(playerFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public List<Home> loadPlayerHomes(final File playerFile) {
        final YamlConfiguration configuration = YamlConfiguration.loadConfiguration(playerFile);
        final List<Home> homes = (List<Home>) configuration.getList("homes");
        return homes;
    }

    private List<Home> getHomes(UUID uuid) {
        if (ConfigManager.getHomes().contains("homes." + uuid)) {
            List<Home> homes = new ArrayList<>();
            ConfigManager.getHomes().getConfigurationSection("homes." + uuid).getKeys(false).forEach(home -> {
                homes.add();
            });
        }
    }
}
